#!/usr/bin/python3

# IEEExplore early access follower.
# Copyright (C) 2024-2025  bufbrane (bufbrane@bufbrane.com)

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import os
import sys
import time
import argparse
import sqlite3
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service as ChromeService


class Ieaf:

    def __init__(self, chrome_path: str = None, chromedriver: str = None, database: str = None):

        self.chrome_path = chrome_path
        self.chromedriver = chromedriver
        self.database = database

        if self.chrome_path:
            if os.name == "posix":
                os.environ["PATH"] = chrome_path + ":" + os.environ["PATH"]
            elif os.name == "nt":
                os.environ["PATH"] = chrome_path + ";" + os.environ["PATH"]

        if not self.database:
            self.database = "./ieaf.db"

        # 1. make sure that database (with two tables) exists
        sql = """select count(*) from sqlite_master where type = "table" and ( name = "serials" or name = "items" );"""
        table_count = 0
        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute(sql)
            for row in cur:
                table_count = row[0]
            conn.close()
        except Exception as e:
            print("Ieaf.__init__() error:", e, " SQL:", sql, file=sys.stderr)
            sys.exit(1)

        if table_count == 0:
            self.__init_database()

        # 2. check database (tables) accessibility        
        self.__delete_item_by_document_id(0xffffffff)
        self.__delete_serial_by_isnumber(0xfffffffe)
        
        if not self.__insert_serial(0xfffffffe, "Ieaf.__init__() test data", "Ieaf.__init__() test data", 0xdeadbeef, "1970-01-01 00:00:00"):
            print("Ieaf.__init__() error: could not insert serial into database. Suggest to use another database file.", file=sys.stderr)
            sys.exit(1)
        
        if not self.__insert_item(0xffffffff, "Ieaf.__init__() test data", 0xfffffffe, "Ieaf.__init__() test data"):
            print("Ieaf.__init__() error: could not insert item into database. Suggest to use another database file.", file=sys.stderr)
            sys.exit(1)
        
        self.__delete_item_by_document_id(0xffffffff)
        self.__delete_serial_by_isnumber(0xfffffffe)


    def __init_database(self)-> None:
    
        initscript = """
    
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

DROP TABLE IF EXISTS items;

CREATE TABLE items (
    document_id          INTEGER  NOT NULL ON CONFLICT FAIL
                                  PRIMARY KEY ON CONFLICT FAIL
                                  UNIQUE ON CONFLICT FAIL,
    title                STRING   NOT NULL ON CONFLICT FAIL,
    isnumber             INTEGER  REFERENCES serials (isnumber) ON DELETE CASCADE
                                                                ON UPDATE CASCADE
                                  NOT NULL,
    indexed_datetime     DATETIME NOT NULL ON CONFLICT FAIL,
    abstract             TEXT,
    latest_read_datetime DATETIME
);

DROP TABLE IF EXISTS serials;

CREATE TABLE serials (
    isnumber               INTEGER  PRIMARY KEY ON CONFLICT FAIL
                                    UNIQUE ON CONFLICT FAIL
                                    NOT NULL ON CONFLICT FAIL,
    title                  STRING   NOT NULL,
    abbreviation           STRING,
    user_sorted_order      INTEGER,
    latest_update_datetime DATETIME
);

INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (4356907, 'IEEE Transactions on Vehicular Technology', 'TVT', 4);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (4357935, 'Proceedings of the IEEE', 'Proc. IEEE', 1);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (4358928, 'IEEE Transactions on Intelligent Transportation Systems', 'TITS', 2);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (4358975, 'IEEE Transactions on Mobile Computing', 'TMC', 1);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (4359146, 'IEEE/ACM Transactions on Networking', 'TON', 1);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (4656680, 'IEEE Transactions on Wireless Communications', 'TWC', 2);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (5451756, 'IEEE Communications Surveys & Tutorials', 'COMST', 4);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (5497975, 'IEEE Transactions on Communications', 'TCOM', 2);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (5534602, 'IEEE Communications Letters', 'LCOMM', 5);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (5594698, 'IEEE Journal on Selected Areas in Communications', 'JSAC', 1);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (5699970, 'IEEE Transactions on Network and Service Management', 'TNSM', 3);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (6065724, 'IEEE Wireless Communications Letters', 'LWC', 5);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (6354260, 'IEEE Vehicular Technology Magazine', 'MVT', 4);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (6702522, 'IEEE Internet of Things Journal', 'IOT', 3);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (7557027, 'IEEE Transactions on Green Communications and Networking', 'TGCN', 4);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (7593423, 'IEEE Communications Magazine', 'MCOM', 4);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (7593426, 'IEEE Wireless Communications', 'MWC', 4);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (7593428, 'IEEE Network', 'MNET', 4);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (7778228, 'IEEE Transactions on Aerospace and Electronic Systems', 'TAES', 4);
INSERT INTO serials (isnumber, title, abbreviation, user_sorted_order) VALUES (9652444, 'China Communications', 'JCC', 5);

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;

    """

        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.executescript(initscript)
            conn.close()
        except Exception as e:
            print("Ieaf.__init_database() error:", e, initscript, file=sys.stderr)
            sys.exit(1)


    def __get_item_by_document_id(self, document_id: int)-> dict:

        result = dict()

        sql = """select document_id, title, isnumber, indexed_datetime, abstract, latest_read_datetime from items where document_id = {};""".format(document_id)

        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute(sql)
            for row in cur:
                result["document_id"]           = row[0]
                result["title"]                 = row[1]
                result["isnumber"]              = row[2]
                result["indexed_datetime"]      = row[3]
                result["abstract"]              = row[4]
                result["latest_read_datetime"]  = row[5]
            conn.close()
        except Exception as e:
            print("Ieaf.__get_item_by_document_id() error:", e, " SQL:", sql, file=sys.stderr)
            sys.exit(1)

        return result


    def __get_all_serials_isnumber(self)-> list:

        result = list()

        sql = """select isnumber, latest_update_datetime from serials order by user_sorted_order asc, isnumber asc;"""
        
        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute(sql)
            for row in cur:
                result.append(row[0])
            conn.close()
        except Exception as e:
            print("Ieaf.__get_all_serials_isnumber() error:", e, " SQL:", sql, file=sys.stderr)
            sys.exit(1)
            
        return result


    def __get_serial_by_isnumber(self, isnumber: int)-> dict:

        result = dict()

        sql = """select isnumber, title, abbreviation, user_sorted_order, latest_update_datetime from serials where isnumber = {};""".format(isnumber)

        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute(sql)
            for row in cur:
                result["isnumber"]               = row[0]
                result["title"]                  = row[1]
                result["abbreviation"]           = row[2]
                result["user_sorted_order"]      = row[3]
                result["latest_update_datetime"] = row[4]
            conn.close()
        except Exception as e:
            print("Ieaf.__get_serial_by_isnumber() error:", e, " SQL:", sql, file=sys.stderr)
            sys.exit(1)

        return result


    def __get_unread_items_in_serial(self, isnumber: int)-> dict:

        result = dict()

        sql = """select document_id, title from items where isnumber = {} and latest_read_datetime = "" order by document_id asc;""".format(isnumber)

        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute(sql)
            for row in cur:
                result[row[0]] = row[1]
            conn.close()
        except Exception as e:
            print("Ieaf.__get_unread_items_in_serial() error:", e, " SQL:", sql, file=sys.stderr)
            sys.exit(1)

        return result


    def __update_item(self, document_id: int, title: str, isnumber: int, indexed_datetime: str, abstract: str = "", latest_read_datetime: str = "")-> None:

        sql = """update items set title = "{}", isnumber = {}, indexed_datetime = "{}", abstract = "{}", latest_read_datetime = "{}" 
            where document_id = {};""".format(title.replace('"', '\''), isnumber, indexed_datetime, abstract.replace('"', '\''), latest_read_datetime, document_id)

        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute(sql)
            conn.commit()
            conn.close()
        except Exception as e:
            print("Ieaf.__update_item() error:", e, " SQL:", sql, file=sys.stderr)
            sys.exit(1)


    def __insert_serial(self, isnumber: int, title: str, abbreviation: str = "", user_sorted_order: int = 0, latest_update_datetime: str = "")-> bool:

        sql = """insert into serials (isnumber, title, abbreviation, user_sorted_order, latest_update_datetime) VALUES 
            ({}, "{}", "{}", "{}", "{}");""".format(isnumber, title.replace('"', '\''), isnumber, abbreviation, user_sorted_order, latest_update_datetime)
        
        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute(sql)
            conn.commit()
            conn.close()
        except Exception as e:
            print("Ieaf.__insert_serial() error:", e, " SQL:", sql, file=sys.stderr)
            return False

        return True


    def __insert_item(self, document_id: int, title: str, isnumber: int, abstract: str = "")-> bool:

        indexed_datetime = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())

        # if item already exists, do update command rather than insert 
        item = self.__get_item_by_document_id(document_id)
        if len(item) != 0:
            self.__update_item(document_id, title, isnumber, indexed_datetime, abstract, item["latest_read_datetime"])
            return

        # if item not exist, do insert command
        sql = """insert into items (document_id, title, isnumber, indexed_datetime, abstract, latest_read_datetime) VALUES 
            ({}, "{}", {}, "{}", "{}", "{}");""".format(document_id, title.replace('"', '\''), isnumber, indexed_datetime, abstract.replace('"', '\''), "")

        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute("""begin transaction;""")
            cur.execute(sql)
            cur.execute("""update serials set latest_update_datetime = "{}" where isnumber = {};""".format(indexed_datetime, isnumber))
            cur.execute("""end transaction;""")
            conn.commit()
            conn.close()
        except Exception as e:
            print("Ieaf.__insert_item() error:", e, " SQL:", sql, file=sys.stderr)
            return False
        
        return True
    

    def __delete_serial_by_isnumber(self, isnumber: int)-> bool:

        sql = """delete from serials where isnumber = {};""".format(isnumber)
        
        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute(sql)
            conn.commit()
            conn.close()
        except Exception as e:
            print("Ieaf.__delete_serial_by_isnumber() error:", e, " SQL:", sql, file=sys.stderr)
            return False

        return True


    def __delete_item_by_document_id(self, document_id: int)-> bool:

        sql = """delete from items where document_id = {};""".format(document_id)
        
        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute(sql)
            conn.commit()
            conn.close()
        except Exception as e:
            print("Ieaf.__delete_item_by_document_id() error:", e, " SQL:", sql, file=sys.stderr)
            return False
        
        return True


    def __fetch_early_access_items(self, isnumber: int, sortType: str = "vol-only-newest", rowsPerPage: int = 100, pageNumber: int = 1)-> list:
        
        result = list()

        try:
            if self.chromedriver:
                service = ChromeService(executable_path=self.chromedriver)
            else:
                service = ChromeService()
            options = webdriver.ChromeOptions()
            browser = webdriver.Chrome(service=service, options=options)

            url = "https://ieeexplore.ieee.org/xpl/tocresult.jsp?isnumber={}&sortType={}&rowsPerPage={}&pageNumber={}".format(isnumber, sortType, rowsPerPage, pageNumber)
            browser.get(url)
            browser.implicitly_wait(15) # waiting for page loading completed (empirical value)

            # extract items list
            publicationIssueMainContent = browser.find_element(By.ID, "publicationIssueMainContent global-margin-px")
            
            # extract each of items 
            for item in publicationIssueMainContent.find_elements(By.CLASS_NAME, "List-results-items"): 

                temp_dict = dict()

                # extract document_id
                href = item.find_element(By.TAG_NAME, "a").get_attribute("href")
                href = href.lstrip("https://ieeexplore.ieee.org/document/")
                href = href.rstrip("/")
                temp_dict["document_id"] = href

                # extract title
                temp_dict["title"] = item.find_element(By.TAG_NAME, "a").text

                # TODO: extract abstract

                result.append(temp_dict)

            browser.quit()

        except Exception as e:
            print("Ieaf.__fetch_early_access_items() error:", e, file=sys.stderr)
            sys.exit(1)

        return result


    def __check_chrome_and_chromedriver(self)-> None:
        
        if os.name == "posix": # for Linux (/bin/sh)
            if os.system("chrome --version > /dev/null 2>&1") == 0:
                pass
            elif os.system("chromium --version > /dev/null 2>&1") == 0:
                pass
            else:
                print("Error: cound not find chrome/chromium.", file=sys.stderr)
                sys.exit(1)

            if os.system("{} --version > /dev/null 2>&1".format(self.chromedriver)) != 0:
                print("Error: cound not find chromedriver.", file=sys.stderr)
                sys.exit(1)

        elif os.name == "nt": # for Windows (C:\Windows\System32\cmd.exe)
            if os.system("where chrome 1>NUL 2>NUL") == 0:
                pass
            elif os.system("where chromium 1>NUL 2>NUL") == 0:
                pass
            else:
                print("Error: cound not find chrome/chromium.", file=sys.stderr)
                sys.exit(1)

            if os.system("{} --version 1>NUL 2>NUL".format(self.chromedriver)) != 0:
                print("Error: cound not find chromedriver.", file=sys.stderr)
                sys.exit(1)


    def update_early_access(self, isnumber_list: list = list())-> None:
        '''
        if isnumber_list is empty then update all the serials, otherwise only the serials in isnumber_list is updated.
        '''

        if self.chromedriver:
            self.__check_chrome_and_chromedriver()

        if len(isnumber_list) == 0:
            isnumber_list = self.__get_all_serials_isnumber()

        for isnumber in isnumber_list:
            # to ensure the idempotence of the operation, delete the existing unread items first.
            for item in self.__get_unread_items_in_serial(isnumber):
                self.__delete_item_by_document_id(item)

            # fetch no more than 20 pages (100 items per page) of each serials
            last_num_of_unread_items = 0
            for page in range(1, 20):
                for item in self.__fetch_early_access_items(isnumber, pageNumber=page):
                    self.__insert_item(item["document_id"], item["title"], isnumber)
                num_of_unread_items = len(self.__get_unread_items_in_serial(isnumber))
                if num_of_unread_items - last_num_of_unread_items < 90:
                    break
                else:
                    last_num_of_unread_items = num_of_unread_items


    def get_unread_statistics(self)-> dict:

        result = dict()

        sql = """select serials.title, count(document_id) from items inner join serials on items.isnumber = serials.isnumber 
                    where items.latest_read_datetime = "" group by items.isnumber order by serials.user_sorted_order asc, items.isnumber asc;"""

        try:
            conn = sqlite3.connect(self.database)
            cur = conn.cursor()
            cur.execute(sql)
            for row in cur:
                result[row[0]] = row[1]
            conn.close()
        except Exception as e:
            print("Ieaf.get_unread_statistics() error:", e, " SQL:", sql, file=sys.stderr)
            sys.exit(1)

        return result


    def get_all_unread_items(self)-> list:

        result = list()

        for isnumber in self.__get_all_serials_isnumber():
            unread_items = self.__get_unread_items_in_serial(isnumber)
            for document_id in unread_items:
                temp_dict = dict()
                temp_dict["title"] = unread_items[document_id]
                temp_dict["serials"] = isnumber
                temp_dict["abstract"] = (self.__get_item_by_document_id(document_id))["abstract"]
                temp_dict["document_id"] = document_id
                temp_dict["abbreviation"] = (self.__get_serial_by_isnumber(isnumber))["abbreviation"]
                result.append(temp_dict)

        return result


    def set_read_flag(self, document_id_list: list = list())-> None:

        latest_read_datetime = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        sql = ""

        if len(document_id_list) == 0: # set latest_read_datetime on all unread documents
            try:
                conn = sqlite3.connect(self.database)
                cur = conn.cursor()
                sql = """update items set latest_read_datetime = "{}" where latest_read_datetime = "";""".format(latest_read_datetime)
                cur.execute(sql)
                conn.commit()
                conn.close()
            except Exception as e:
                print("Ieaf.set_read_flag() error:", e, " SQL:", sql, file=sys.stderr)
                sys.exit(1)
        else:
            try:
                conn = sqlite3.connect(self.database)
                cur = conn.cursor()
                cur.execute("""begin transaction;""")
                for document_id in document_id_list:
                    sql = """update items set latest_read_datetime = "{}" where document_id = {};""".format(latest_read_datetime, document_id)
                    cur.execute(sql)
                cur.execute("""end transaction;""")
                conn.commit()
                conn.close()
            except Exception as e:
                print("Ieaf.set_read_flag() error:", e, " SQL:", sql, file=sys.stderr)
                sys.exit(1)


def parse_args()-> argparse.Namespace:

        parser = argparse.ArgumentParser(prog="ieaf", description="ieaf is an acronym of IEEExplore early access follower.", epilog="For more details, please visit https://github.com/bufbrane/ieaf")
        
        parser.add_argument("-n", "--no-update", action="store_true", dest="no_update", help="skip fetching early access items from IEEExplore")
        parser.add_argument("-l", "--list", action="store_true", help="list all of unread documents")
        parser.add_argument("-r", "--read", action="store_true", help="set the read flag on all of unread documents")
        parser.add_argument("--chrome-path", action="store", help="set the Chrome browser directory path")
        parser.add_argument("--chromedriver", action="store", default=os.getenv("CHROMEDRIVER"), help="set the chromedriver executable file path")
        parser.add_argument("--database", action="store", default=os.getenv("IEAF_DATABASE"), help="set the database file path")
        
        return parser.parse_args()


def main():

    args = parse_args()

    ieaf = Ieaf(args.chrome_path, args.chromedriver, args.database)

    if not args.no_update:
        ieaf.update_early_access()
            
    if args.list:
        items = ieaf.get_unread_statistics()
        if len(items) > 0:
            print("Unread document statistics: ")
            for key in items: 
                print("· {}: {}".format(key, items[key]))
            print("\n")

        items = ieaf.get_all_unread_items()
        for i in range(len(items)):
            item = items[i]
            if item["abbreviation"] != "":
                item["serials"] = item["abbreviation"]
            print("({})".format(i + 1), (str(item["title"])).replace("\n", ""), "|", item["serials"])
            print("https://ieeexplore.ieee.org/document/{}  \n".format(item["document_id"]))

    if args.read:
        if input("Do you want to set the read flag on unread documents? [y/N] ") == "y":
            ieaf.set_read_flag()
        else:
            print("abort.")
            sys.exit(1)


if __name__ == "__main__":
    main()
